var sScriptsPath = 'C:/DazStudioScripts/src/';	// Here are filepaths and directories.
var oSourceDirectory = new DzDir('C:/assets/engine');
var oUnwantedCombos = new DzFile('C:/DazStudioScripts/dataunwantedCombos.csv');
var aCharacters = oSourceDirectory.getFilesFromDir(['*_character.duf'], true);		
var aAnimations = oSourceDirectory.getFilesFromDir(['*_animation.duf'], true);
var aGear = oSourceDirectory.getFilesFromDir(['*_gear.duf'], true);
var aLoot = oSourceDirectory.getFilesFromDir(['*_loot.duf'], true);
var aProps = oSourceDirectory.getFilesFromDir(['*_prop.duf'], true);
var aSkins = oSourceDirectory.getFilesFromDir(['*_skin.duf'], true);

var oContentMgr = App.getContentMgr();		// Here are various managers and settings that we need.
var oRenderMgr = App.getRenderMgr();
var oIrayOptions = oRenderMgr.getRenderElementObjects()[1];
var oRenderOptions = oRenderMgr.getRenderOptions();
var oViewport = MainWindow.getViewportMgr().getActiveViewport().get3DViewport();
var oActiveCanvasProperty = oIrayOptions.getPropertyGroups().findProperty('Active Canvas');

var nAngles = 16;		// These are the parameters to be utilized.
var nFrameRate = 30;
var nEveryNthFrame = 3;
var nDistanceMultiplier = 2;
var nDEGREES_IN_CIRCLE = 360;
var nDAZ_TICKS = 4800;
var nTicksPerFrame = nDAZ_TICKS / nFrameRate;

var oRoot = Scene.findNodeByLabel('root');		// These are the nodes that are within the masterTemplate.
var oShadowLight = Scene.findNodeByLabel('shadowLight');
/*********************************************************************/
function containsText(sSource, sTextToFind) // Check if a string contains another string.
{
	if (sSource) return sSource.indexOf(sTextToFind) !== -1;
}
/*********************************************************************/
function unwantedComboCheck() // Check unwantedCombos.csv, and return true only if this combation is unwanted.
{
	oUnwantedCombos.open(oUnwantedCombos.ReadOnly);
	var aUnwantedCombos = oUnwantedCombos.readLines();
	oUnwantedCombos.close();

	for (var i = 0; i != aUnwantedCombos.length; i++) // If every value either matches, or is blank, this is an unwanted combo.
	{
		var aComboLine = aUnwantedCombos[i].trim().split(',');

		if((aComboLine[0] === sCharacterName || aComboLine[0] === '') && (aComboLine[1] === sAnimationName || aComboLine[1] === '') && (aComboLine[2] === sGearName || aComboLine[2] === '')) return true;
	}
}
/*********************************************************************/
function getName(sFileName) // Obtain the desired name out of a filepath or filename.
{
	return sFileName.split('/').pop().split('_')[0];
}
/*********************************************************************/
function setMatte(bBool) // Set the Matte Parameter of a character and its children.
{	
	if (oCharacterMatteParameter)
	{
		oCharacterMatteParameter.setValue(bBool);
		for (var i = 0; i != aCharacterChildren.length; i++)
		{
			var oChildMatteParameter = aCharacterChildren[i].findPropertyByLabel('Enable Iray Matte');
			if (oChildMatteParameter) oChildMatteParameter.setValue(bBool);
		}
	}
}
/*********************************************************************/
function renderCore(sName, sType, sAnimationName)
{
	var nDegrees = nDEGREES_IN_CIRCLE / nAngles;
	var nFramesTotal = (Scene.getPlayRange().end / nTicksPerFrame) + 1;		// Here are variables we determined once we start rendering.
	var nFrameCount = nFramesTotal / nEveryNthFrame;

	for (var nAngle = 0; nAngle != nDEGREES_IN_CIRCLE; nAngle = nAngle + nDegrees) // Loop through each angle...
	{
		var nConstructAngle;
		switch (nAngle)
		{
			// Construct's 0 degrees is east, Daz is south.
			// Construct's degrees rotate counter-clockwise, Daz rotates clockwise.
			// Construct degrees range from -180 to 180, or 0 to 360, depending on the system. Daz can accept either but defaults to 0 to 360.
			case 0: nConstructAngle = 90;
				 break;
			case 22.5: nConstructAngle = 67.5;
				break;
			case 45: nConstructAngle = 45;
				break;
			case 67.5: nConstructAngle = 22.5;
				break;
			case 90: nConstructAngle = 0;
				break;
			case 112.5: nConstructAngle = -22.5;
				break;
			case 135: nConstructAngle = -45;
				break;
			case 157.5:
				constructAngle = -67.5;
				break;
			case 180: nConstructAngle = -90;
				break;
			case 202.5: nConstructAngle = -112.5;
				break;
			case 225: nConstructAngle = -135;
				break;
			case 247.5: nConstructAngle = -157.5;
				break;
			case 270: nConstructAngle = 180;
				break;
			case 292.5: nConstructAngle = 157.5;
				break;
			case 315: nConstructAngle = 135;
				break;
			case 337.5: nConstructAngle = 112.5;
				break;
		}
		for (var nFrame = 0; nFrame <= nFrameCount; nFrame++) // Loop through each frame...
		{
			var sFinalFilePath = 'C:/assets/output/' + sName + '_' + sType + '/' + sAnimationName + '_' + nConstructAngle + '/' + ("000"+ nFrame).slice(-3) + '.png'; // Conglamorate lots of variables to create our exporting filepath.

			if (oSourceDirectory.exists(sFinalFilePath)) continue; // Set the filepath. If it already exists, skip it.
			oRenderOptions.renderImgFilename = sFinalFilePath;

			Scene.setFrame(nFrame * nEveryNthFrame); // Set the current frame, and angle.
			oRoot.getYRotControl().setValue(nAngle);

			if (containsText(sType, 'Shadow')) // For shadows, move the root node off-screen along the Z axis of the shadowLight, toggle the shadow light and set the matte parameter(s).
			{
				oRoot.getXPosControl().setValue(252.2766 * nDistanceMultiplier);
				oRoot.getYPosControl().setValue(596.9373 * nDistanceMultiplier);
				oRoot.getZPosControl().setValue(541.0090 * nDistanceMultiplier);

				oShadowLight.setVisible(true);
				if(sType === 'gearShadows') setMatte(true);
			}
			else
			{
				oRoot.getXPosControl().setValue(0);
				oRoot.getYPosControl().setValue(0);
				oRoot.getZPosControl().setValue(0);

				oShadowLight.setVisible(false);
				setMatte(false);	
			}
			if (sType === 'gear') oActiveCanvasProperty.setValue(1);		// Set the appropriate canvas.
			else oActiveCanvasProperty.setValue(0);
			
			while(backgroundProgressIsActive()) processEvents();		// Wait for everything else to finish first, specifically the mesh smoother, then render.
			oRenderMgr.doRender();
		}
	}
}
/*********************************************************************

							RENDER LOOPS

*********************************************************************/
for (var i = 0; i != aCharacters.length; i++) // For each character...
{
	oContentMgr.openFile(aCharacters[i], true);		// Merge in a character, and get its name.
	var sCharacterName = getName(aCharacters[i]);

	var oCharacter = Scene.findNodeByLabel('character');		// Set up the character.
	var aCharacterChildren = oCharacter.getNodeChildren(false);
	var oCharacterMatteParameter = oCharacter.findPropertyByLabel('Enable Iray Matte');
	var aCharacterProperties = oCharacter.getPropertyList();
	var bHasCharacterSkins;

	oRoot.addNodeChild(oCharacter, true);

	for (var j = 0; j != aAnimations.length; j++) // For each animation...
	{
		oContentMgr.openFile(aAnimations[j], true); // Merge in an animation.

		var sAnimationName = getName(aAnimations[j]);

		if(!aGear.length) // If there is no gear...
		{
			for (var kk = 0; kk != aSkins.length; kk++) if (containsText(aSkins[kk], sCharacterName)) // For each skin, check if the character name is present in the skin's filepath.
			{
				bHasCharacterSkins = true;		// If it is, flag it as such, merge in the skin and get its name.
				oContentMgr.openFile(aSkins[kk], true);
				var sSkinName = getName(aSkins[kk]);

				renderCore(sSkinName, 'character', sAnimationName); // Render, using the skin name.
			}
			if(!bHasCharacterSkins) renderCore(sCharacterName, 'character', sAnimationName); // If there's no skins for this character, render using the character name.

			renderCore(sCharacterName, 'characterShadow', sAnimationName); // Render character shadows using the character name, because we don't need shadows for individual skins.
		}
		else for (var k = 0; k != aGear.length; k++) // If there are gears, for each gear...
		{
			if (unwantedComboCheck()) continue;

			oContentMgr.openFile(aGear[k], true);
			var sGearName = getName(aGear[k]);
			var oGear = Scene.findNodeByLabel('gear');
			var oGearShape = oGear.getObject().getCurrentShape();
			var bHasGearSkins;

			var aGearChildren = oGear.getNodeChildren(false);

			oIrayOptions.addNodeToNodeList('visibleNodes', oGear); // Add the gear to the canvas.
			
			// Animate surfaces:
			// This will not work in it's current state for gear children, as we don't have a naming convention for them. We'll need to come up with one if we ever need to animate the texture of a gear child.
			for (var i = 0; i != aCharacterProperties.length; i++) // Loop through all the properties of the character.
			{
				var sCharacterPropertyName = aCharacterProperties[i].assetId;
				
				if (containsText(sCharacterPropertyName, '!')) // If it's a property we created...
				{
					aCharacterPropertyName = sCharacterPropertyName.split('!'); // Find the material and its property using the gear property name.
					
					if (aCharacterPropertyName[0] === sGearName) oGearShape.findMaterial(aCharacterPropertyName[1]).findPropertyByLabel(aCharacterPropertyName[2]).linkTo(aCharacterProperties[i]);
				}
			}
			for (var ii = 0; ii != aGearChildren.length; ii++) oIrayOptions.addNodeToNodeList('visibleNodes', aGearChildren[ii]); // Add all gear children to the canvas as well.

			for (var kk = 0; kk != aSkins.length; kk++) if (containsText(aSkins[kk], sGearName)) // Check every skin, to verify if it's applicable for that gear.
			{
				bHasGearSkins = true;		// Switch selection to the gear temporarily, so we can load in its skin.
				oCharacter.select(false);
				oGear.select(true);
				oContentMgr.openFile(aSkins[kk], true);
				oGear.select(false);
				oCharacter.select(true);
				var sSkinName = getName(aSkins[kk]);

				renderCore(sCharacterName + '_' + sSkinName, 'gear', sAnimationName);
			}
			if (!bHasGearSkins) renderCore(sCharacterName + '_' + sGearName, 'gear', sAnimationName); // If there's no skins for this gear, render it using the gear name.
			
			renderCore(sCharacterName + '_' + sGearName, 'gearShadow', sAnimationName); // Regardless of skins, render just one set of shadows using the gear name.

			Scene.removeNode(oGear);
		}	
		
		Scene.setPlayRange(DzTimeRange(0, 0)); // Set the play range to 0. The next animation will expand to and overwrite only the frames in which it has data.
	}
	Scene.removeNode(oCharacter);
}
for (var i = 0; i != aLoot.length; i++) // For each loot...
{
	var bHasLootSkins;
	oContentMgr.openFile(aLoot[i], true);
	var sLootName = getName(aLoot[i]);
	var oLoot = Scene.findNodeByLabel('loot');
	oRoot.addNodeChild(oLoot, true);

	// for each skin, check if the loot name is present in the skin's filepath
	for (var kk = 0; kk != aSkins.length; kk++) if (containsText(aSkins[kk], sLootName))
	{
		// if it is, flag it as such, merge in the skin and get its name
		bHasLootSkins = true;
		oContentMgr.openFile(aSkins[kk], true);
		var sSkinName = getName(aSkins[kk]);

		// render using the skin name
		renderCore(sSkinName, 'loot', 'static');
	}
	// if there's no skins for this loot, render using the loot name
	if(!bHasLootSkins) renderCore(sLootName, 'loot', 'static');

	Scene.removeNode(oLoot);
}
for (var i = 0; i != aProps.length; i++) // For each prop...
{
	oContentMgr.openFile(aProps[i], true); // merge in a prop
	var sPropName = getName(aProps[i]);
	var oProp = Scene.findNodeByLabel('prop');

	renderCore(sPropName, 'prop', 'static');

	renderCore(sPropName, 'propShadow', 'static');

	Scene.removeNode(oProp);
}